@page "/account/notifications"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject AuthenticationStateProvider AuthStateProvider

@if (!string.IsNullOrEmpty(StatusMessage))
{
    <p class="danger">
        @StatusMessage
    </p>
}

<EditForm FormName="notifications-options" Model="notificationModel" OnValidSubmit="SaveChanges" class="notifications">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <h2 class="standard-heading">Notifications</h2>

    <div class="form-group">
        <label class="standard-heading">Preferred email for notifications</label>
        <InputText @bind-Value="notificationModel.NewsletterEmail" class="form-sign-in" placeholder="example@gmail.com" />
        <ValidationMessage For="@(() => notificationModel.NewsletterEmail)" class="text-danger" />
    </div>

    <div class="flex">
        <div class="switch-btn">
            <label class="switch">
                <InputCheckbox @bind-Value="notificationModel.IsSubscribedToNewsletter" />
                <span class="slider round"></span>
            </label>
        </div>
        <div class="switch-text">
            <h6 class="standard-heading">Subscribe to Newsletter</h6>
            <p class="text-s">Nec, posuere non felis duis massa vitae aliquet interdum scelerisque. Neque ullamcorper.</p>
        </div>
    </div>

    <div class="flex">
        <div class="switch-btn">
            <label class="switch">
                <input type="checkbox" />
                <span class="slider round"></span>
            </label>
        </div>
        <div class="switch-text">
            <h6 class="standard-heading">Use Dark Mode Theme in Application</h6>
            <p class="text-s ">Tortor massa porttitor enim tristique neque fermentum sed.</p>
        </div>
    </div>

    <div class="form-flex">
        <button type="reset" class="white-btn">Cancel</button>
        <button type="submit" class="theme-btn"><span>Save changes</span></button>
    </div>
</EditForm>



@code {
    private string? StatusMessage;
    private NotificationModel notificationModel = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrEmpty(userId))
        {
            await using var context = await DbContextFactory.CreateDbContextAsync();
            var user = await context.Users.AsNoTracking().FirstOrDefaultAsync(u => u.Id == userId);

            if (user is not null)
            {
                if (user.IsSubscribedToNewsletter)
                {
                    notificationModel.NewsletterEmail = user.NewsletterEmail;
                    notificationModel.IsSubscribedToNewsletter = true;
                }
                else
                {
                    notificationModel.NewsletterEmail = string.Empty;
                    notificationModel.IsSubscribedToNewsletter = false;
                }
            }
        }
    }

    private async Task SaveChanges()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrEmpty(userId))
        {
            await using var context = await DbContextFactory.CreateDbContextAsync();
            var userToUpdate = await context.Users.FirstOrDefaultAsync(u => u.Id == userId);

            if (userToUpdate is null)
            {
                StatusMessage = "User not found.";
                return;
            }

            userToUpdate.IsSubscribedToNewsletter = notificationModel.IsSubscribedToNewsletter;
            userToUpdate.NewsletterEmail = notificationModel.IsSubscribedToNewsletter
                ? notificationModel.NewsletterEmail
                : null;

            await context.SaveChangesAsync();

            StatusMessage = userToUpdate.IsSubscribedToNewsletter
                ? "You are now subscribed to our newsletter!"
                : "You have unsubscribed from our newsletter.";
        }
    }



    public class NotificationModel
    {
        [RegularExpression(@"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}", ErrorMessage = "invalid email address")]
        public string? NewsletterEmail { get; set; }

        public bool IsSubscribedToNewsletter { get; set; }

    }
}
